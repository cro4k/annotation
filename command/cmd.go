package command

import (
	"fmt"
	"github.com/cro4k/annotation/core"
	"github.com/cro4k/annotation/version"
	"github.com/cro4k/common/args"
	"strings"
)

var ver = fmt.Sprintf("Go annotation generator.\nVersion: %s\nAuthor: github.com/cro4k\n", version.Version)

var (
	Build = &args.Handler{
		Match: args.Name("build"),
		Handler: func(c *args.Context) (string, error) {
			setConfig(c.KVs())
			err := core.Export(c.KVs().Val("o", "-out"))
			return "", err
		},
		Usage: "build:\n" +
			"  build annotation.\n" +
			"  option:\n" +
			"    -o --out: the generated files output dir, default is './annotation'\n" +
			"    --replace: add import path alias, use comma to separate multi alias.\n" +
			"    --rm-replace: remove import path alias, use comma to separate multi alias.\n" +
			"  Usage: ann build -o annotation\n",
	}

	Clean = &args.Handler{
		Match: args.Name("clean"),
		Handler: func(c *args.Context) (string, error) {
			return "", core.Clean()
		},
		Usage: "clean:\n" +
			"  Remove all files generated by annotation.\n" +
			"  Usage: ann clean\n",
	}

	Version = &args.Handler{
		Match: args.Name("version"),
		Handler: func(c *args.Context) (string, error) {
			return ver, nil
		},
		Usage: "version: \n" +
			"  show ann version.\n",
	}

	Config = &args.Handler{
		Match: args.Name("config"),
		Handler: func(c *args.Context) (string, error) {
			setConfig(c.KVs())
			return "", core.WriteConfigFile()
		},
		Usage: "config:\n" +
			"  The config for decode annotation. Config file will be saved in project root path and named '.ann/ann.yml'.\n" +
			"  option:\n" +
			"    --replace: add import path alias, use comma to separate multi alias.\n" +
			"    --rm-replace: remove import path alias, use comma to separate multi alias.\n" +
			"  Usage: ann config --replace gopkg.in/yaml.v3:yaml,yml --replace another.com/pkgname:pkg\n" +
			"  Usage: ann config --rm-replace gopkg.in/yaml.v3:yaml,yml --rm-replace another.com/without/colon/to/remove/all\n",
	}

	Chain = args.Chain{
		Build,
		Clean,
		Version,
		Config,
	}
)

func setConfig(kvs args.KV) {
	if add := kvs.Vals("-replace"); len(add) > 0 {
		var m = make(map[string][]string)
		for _, v := range add {
			if temp := strings.Split(v, ":"); len(temp) > 1 && temp[0] != "" && temp[1] != "" {
				m[temp[0]] = strings.Split(temp[1], ",")
			} else {
				continue
			}
		}
		core.SetConfig(m)
	}
	if remove := kvs.Vals("-rm-replace"); len(remove) > 0 {
		var m = make(map[string][]string)
		for _, v := range remove {
			if temp := strings.Split(v, ":"); len(temp) > 1 {
				m[temp[0]] = strings.Split(temp[1], ",")
			} else if _, ok := m[temp[0]]; !ok {
				m[temp[0]] = []string{}
			}
		}
		core.DelConfig(m)
	}
}
