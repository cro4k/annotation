// Copyright none
package main

import (
	"fmt"
	"github.com/cro4k/annotation/core"
	"github.com/cro4k/annotation/version"
	"github.com/cro4k/common/args"
	"os"
	"strings"
)

const help = "build:\n" +
	"  build annotation.\n" +
	"  option:\n" +
	"    -o --out: the generated files output dir, default is './annotation'\n" +
	"    --replace: add import path alias, use comma to separate multi alias.\n" +
	"    --rm-replace: remove import path alias, use comma to separate multi alias.\n" +
	"  Usage: ann build -o annotation\n" +
	"clean:\n" +
	"  Remove all files generated by annotation.\n" +
	"  Usage: ann clean\n" +
	"config:\n" +
	"  The config for decode annotation. Config file will be saved in project root path and named '.ann/ann.yml'.\n" +
	"  option:\n" +
	"    --replace: add import path alias, use comma to separate multi alias.\n" +
	"    --rm-replace: remove import path alias, use comma to separate multi alias.\n" +
	"  Usage: ann config --replace gopkg.in/yaml.v3:yaml,yml --replace another.com/pkgname:pkg\n" +
	"  Usage: ann config --rm-replace gopkg.in/yaml.v3:yaml,yml --rm-replace another.com/without/colon/to/remove/all\n"

func main() {
	kvs, cmds := args.Parse()
	cmd := cmds.Cmd()
	var err error
	var message string
	var ver = fmt.Sprintf("Go annotation generator.\nVersion: %s\nAuthor: github.com/cro4k\n", version.Version)
	switch {
	case kvs.Is("h", "-help") || cmd == "":
		message = ver + "--------------------------------------------------\n" + help
	case cmd == "build":
		setConfig(kvs)
		err = core.Export(kvs.Val("o", "-out"))
	case cmd == "clean":
		err = core.Clean()
	case cmd == "version":
		message = ver
	case cmd == "config":
		setConfig(kvs)
		err = core.WriteConfigFile()
	default:
		err = fmt.Errorf("ann %s: unknown command\nRun 'ann -h' for usage", cmd)
	}
	if err != nil {
		_, _ = os.Stderr.WriteString(err.Error())
	} else if message != "" {
		_, _ = fmt.Fprintln(os.Stdout, message)
	}
}

func setConfig(kvs args.KV) {
	if add := kvs.Vals("-replace"); len(add) > 0 {
		var m = make(map[string][]string)
		for _, v := range add {
			if temp := strings.Split(v, ":"); len(temp) > 1 && temp[0] != "" && temp[1] != "" {
				m[temp[0]] = strings.Split(temp[1], ",")
			} else {
				continue
			}
		}
		core.SetConfig(m)
	}
	if remove := kvs.Vals("-rm-replace"); len(remove) > 0 {
		var m = make(map[string][]string)
		for _, v := range remove {
			if temp := strings.Split(v, ":"); len(temp) > 1 {
				m[temp[0]] = strings.Split(temp[1], ",")
			} else if _, ok := m[temp[0]]; !ok {
				m[temp[0]] = []string{}
			}
		}
		core.DelConfig(m)
	}
}
